/*! coi-serviceworker v0.1.7 - Guido Zuidhof and contributors, licensed under MIT */
let coepCredentialless = !1;

if (typeof window === "undefined") {
  self.addEventListener("install", () => self.skipWaiting());
  self.addEventListener("activate", (e) => e.waitUntil(self.clients.claim()));
  
  self.addEventListener("message", (e) => {
    if (e.data) {
      if (e.data.type === "deregister") {
        self.registration
          .unregister()
          .then(() => self.clients.matchAll())
          .then((clients) => {
            clients.forEach((client) => client.navigate(client.url));
          });
      } else if (e.data.type === "coepCredentialless") {
        coepCredentialless = e.data.value;
      }
    }
  });

  self.addEventListener("fetch", function (e) {
    const o = e.request;
    if ("only-if-cached" === o.cache && "same-origin" !== o.mode) return;
    
    const s = coepCredentialless && "no-cors" === o.mode ? new Request(o, { credentials: "omit" }) : o;
    
    e.respondWith(
      fetch(s)
        .then((response) => {
          // If the response status is 0, return an empty response with the same status and headers
          if (response.status === 0) {
            return new Response(null, { status: response.status, statusText: response.statusText, headers: response.headers });
          }

          const headers = new Headers(response.headers);
          
          // Set COEP and CORP headers to allow all cross-origin resources
          headers.set("Cross-Origin-Embedder-Policy", "unsafe-none"); // Allow everything
          headers.set("Cross-Origin-Resource-Policy", "cross-origin"); // Allow cross-origin resources
          headers.set("Cross-Origin-Opener-Policy", "same-origin");

          // If the body is present, return a response with the body and modified headers
          if (response.body) {
            return new Response(response.body, { status: response.status, statusText: response.statusText, headers: headers });
          } else {
            // If the body is null, return a response with no body but modified headers
            return new Response(null, { status: response.status, statusText: response.statusText, headers: headers });
          }
        })
        .catch((error) => {
          console.error(error);
          return new Response(null, { status: 500, statusText: "Internal Server Error" });
        })
    );
  });
} else {
  (() => {
    const e = window.sessionStorage.getItem("coiReloadedBySelf");
    window.sessionStorage.removeItem("coiReloadedBySelf");
    const o = "coepdegrade" === e;
    const s = {
      shouldRegister: () => !e,
      shouldDeregister: () => !1,
      coepCredentialless: () => !0,
      coepDegrade: () => !0,
      doReload: () => window.location.reload(),
      quiet: !1,
      ...window.coi,
    };
    const r = navigator;
    const t = r.serviceWorker && r.serviceWorker.controller;
    
    if (t && !window.crossOriginIsolated) {
      window.sessionStorage.setItem("coiCoepHasFailed", "true");
    }

    const i = window.sessionStorage.getItem("coiCoepHasFailed");

    if (t) {
      const degrade = s.coepDegrade() && !(o || window.crossOriginIsolated);
      r.serviceWorker.controller.postMessage({
        type: "coepCredentialless",
        value: !(degrade || i && s.coepDegrade()) && s.coepCredentialless(),
      });
      
      if (degrade) {
        if (!s.quiet) {
          console.log("Reloading page to degrade COEP.");
        }
        window.sessionStorage.setItem("coiReloadedBySelf", "coepdegrade");
        s.doReload();
      }

      if (s.shouldDeregister()) {
        r.serviceWorker.controller.postMessage({ type: "deregister" });
      }
    }

    if (!window.crossOriginIsolated && s.shouldRegister()) {
      if (window.isSecureContext) {
        if (r.serviceWorker) {
          r.serviceWorker
            .register(window.document.currentScript.src)
            .then((e) => {
              if (!s.quiet) {
                console.log("COOP/COEP Service Worker registered", e.scope);
              }
              e.addEventListener("updatefound", () => {
                if (!s.quiet) {
                  console.log("Reloading page to make use of updated COOP/COEP Service Worker.");
                }
                window.sessionStorage.setItem("coiReloadedBySelf", "updatefound");
                s.doReload();
              });

              if (e.active && !r.serviceWorker.controller) {
                if (!s.quiet) {
                  console.log("Reloading page to make use of COOP/COEP Service Worker.");
                }
                window.sessionStorage.setItem("coiReloadedBySelf", "notcontrolling");
                s.doReload();
              }
            })
            .catch((err) => {
              if (!s.quiet) {
                console.error("COOP/COEP Service Worker failed to register:", err);
              }
            });
        } else if (!s.quiet) {
          console.log("COOP/COEP Service Worker not registered, a secure context is required.");
        }
      }
    }
  })();
}
