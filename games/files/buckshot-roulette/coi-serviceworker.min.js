/*! Modified for LupineVault (github.com/lupinevault, lupinevault.com) by tf7software */
let coepCredentialless = false;

if (typeof window === "undefined") {
  self.addEventListener("install", () => self.skipWaiting());
  self.addEventListener("activate", (event) => event.waitUntil(self.clients.claim()));
  self.addEventListener("message", (event) => {
    if (event.data) {
      if (event.data.type === "deregister") {
        self.registration.unregister()
          .then(() => self.clients.matchAll())
          .then((clients) => clients.forEach((client) => client.navigate(client.url)));
      } else if (event.data.type === "coepCredentialless") {
        coepCredentialless = event.data.value;
      }
    }
  });

  self.addEventListener("fetch", (event) => {
    const request = event.request;

    if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
      return;
    }

    const modifiedRequest = coepCredentialless && request.mode === "no-cors"
      ? new Request(request, { credentials: "omit" })
      : request;

    event.respondWith(
      fetch(modifiedRequest)
        .then((response) => {
          if (response.status === 0) return response;
          return response; // No headers modification, allow everything.
        })
        .catch((error) => console.error(error))
    );
  });
} else {
  (() => {
    const options = {
      shouldRegister: () => true,
      shouldDeregister: () => false,
      quiet: false,
      ...window.coi,
    };

    const { serviceWorker } = navigator;

    if (serviceWorker && serviceWorker.controller) {
      serviceWorker.controller.postMessage({ type: "coepCredentialless", value: false });
      if (options.shouldDeregister()) {
        serviceWorker.controller.postMessage({ type: "deregister" });
      }
    }

    if (options.shouldRegister() && window.isSecureContext) {
      if (serviceWorker) {
        serviceWorker.register(window.document.currentScript.src).then((registration) => {
          if (!options.quiet) console.log("Service Worker registered:", registration.scope);
        }).catch((error) => {
          if (!options.quiet) console.error("Service Worker failed to register:", error);
        });
      } else if (!options.quiet) {
        console.error("Service Worker not registered, secure context is required.");
      }
    }
  })();
}
