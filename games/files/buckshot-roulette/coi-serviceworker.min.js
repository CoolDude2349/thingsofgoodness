/*! coi-serviceworker v0.1.7 - Guido Zuidhof and contributors, licensed under MIT */

let coepCredentialless = false;

if (typeof window === 'undefined') {
    self.addEventListener("install", () => self.skipWaiting());
    self.addEventListener("activate", (e) => e.waitUntil(self.clients.claim()));

    self.addEventListener("message", (e) => {
        if (e.data) {
            if (e.data.type === "deregister") {
                self.registration.unregister()
                    .then(() => self.clients.matchAll())
                    .then((clients) => {
                        clients.forEach((client) => client.navigate(client.url));
                    });
            } else if (e.data.type === "coepCredentialless") {
                coepCredentialless = e.data.value;
            }
        }
    });

    self.addEventListener("fetch", (e) => {
        const request = e.request;

        // Skip if the cache is 'only-if-cached' and the mode is not 'same-origin'
        if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
            return;
        }

        // Handle request modification based on COEP settings
        const modifiedRequest = coepCredentialless && request.mode === "no-cors"
            ? new Request(request, { credentials: "omit" })
            : request;

        e.respondWith(fetch(modifiedRequest)
            .then((response) => {
                if (response.status === 0) return response;

                const headers = new Headers(response.headers);

                // Set COEP and CORP headers based on credentialless setting
                headers.set("Cross-Origin-Embedder-Policy", coepCredentialless ? "credentialless" : "require-corp");
                if (!coepCredentialless) {
                    headers.set("Cross-Origin-Resource-Policy", "cross-origin");
                }
                headers.set("Cross-Origin-Opener-Policy", "same-origin");

                return new Response(response.body, {
                    status: response.status,
                    statusText: response.statusText,
                    headers: headers
                });
            })
            .catch((error) => {
                console.error(error);
            })
        );
    });
} else {
    const sessionStorageValue = window.sessionStorage.getItem("coiReloadedBySelf");
    window.sessionStorage.removeItem("coiReloadedBySelf");

    const isCoepDegrade = sessionStorageValue === "coepdegrade";
    const settings = {
        shouldRegister: () => !sessionStorageValue,
        shouldDeregister: () => false,
        coepCredentialless: () => true,
        coepDegrade: () => true,
        doReload: () => window.location.reload(),
        quiet: false,
        ...window.coi
    };

    const navigator = window.navigator;
    const serviceWorkerController = navigator.serviceWorker && navigator.serviceWorker.controller;

    if (serviceWorkerController && !window.crossOriginIsolated) {
        window.sessionStorage.setItem("coiCoepHasFailed", "true");
    }

    const coepHasFailed = window.sessionStorage.getItem("coiCoepHasFailed");

    if (serviceWorkerController) {
        const degradeCOEP = settings.coepDegrade() && !(isCoepDegrade || window.crossOriginIsolated);

        // Post message to service worker with updated COEP settings
        serviceWorkerController.postMessage({
            type: "coepCredentialless",
            value: !(degradeCOEP || coepHasFailed && settings.coepDegrade()) && settings.coepCredentialless()
        });

        // Reload page if necessary
        if (degradeCOEP && !settings.quiet) {
            console.log("Reloading page to degrade COEP.");
            window.sessionStorage.setItem("coiReloadedBySelf", "coepdegrade");
            settings.doReload();
        }

        if (settings.shouldDeregister()) {
            serviceWorkerController.postMessage({ type: "deregister" });
        }
    }

    if (!window.crossOriginIsolated && settings.shouldRegister()) {
        if (window.isSecureContext) {
            if (navigator.serviceWorker) {
                navigator.serviceWorker.register(window.document.currentScript.src)
                    .then((registration) => {
                        if (!settings.quiet) {
                            console.log("COOP/COEP Service Worker registered", registration.scope);
                        }
                        registration.addEventListener("updatefound", () => {
                            if (!settings.quiet) {
                                console.log("Reloading page to make use of updated COOP/COEP Service Worker.");
                            }
                            window.sessionStorage.setItem("coiReloadedBySelf", "updatefound");
                            settings.doReload();
                        });

                        if (registration.active && !navigator.serviceWorker.controller) {
                            if (!settings.quiet) {
                                console.log("Reloading page to make use of COOP/COEP Service Worker.");
                            }
                            window.sessionStorage.setItem("coiReloadedBySelf", "notcontrolling");
                            settings.doReload();
                        }
                    })
                    .catch((error) => {
                        if (!settings.quiet) {
                            console.error("COOP/COEP Service Worker failed to register:", error);
                        }
                    });
            } else if (!settings.quiet) {
                console.log("COOP/COEP Service Worker not registered, perhaps due to private mode.");
            }
        } else if (!settings.quiet) {
            console.log("COOP/COEP Service Worker not registered, a secure context is required.");
        }
    }
}
