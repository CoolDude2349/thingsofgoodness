/*! coi-serviceworker v0.1.7 - Guido Zuidhof and contributors, licensed under MIT */
let coepCredentialless = false;

if (typeof window === "undefined") {
    self.addEventListener("install", () => self.skipWaiting());
    self.addEventListener("activate", (e) => e.waitUntil(self.clients.claim()));
    self.addEventListener("message", (e) => {
        if (e.data) {
            if (e.data.type === "deregister") {
                self.registration.unregister().then(() => self.clients.matchAll()).then((e) => {
                    e.forEach((e) => e.navigate(e.url));
                });
            } else if (e.data.type === "coepCredentialless") {
                coepCredentialless = e.data.value;
            }
        }
    });

    self.addEventListener("fetch", function (e) {
        const o = e.request;

        // Skip the request if it's only-if-cached and not same-origin
        if ("only-if-cached" === o.cache && "same-origin" !== o.mode) return;

        // Modify the request if needed
        const s = coepCredentialless && "no-cors" === o.mode ? new Request(o, { credentials: "omit" }) : o;

        e.respondWith(
            fetch(s).then((res) => {
                // Handle case where status is 0 (network error or failed request)
                if (res.status === 0) {
                    // Return a fallback response in case of error
                    return new Response(null, { status: 0 });
                }

                // Set custom headers
                const headers = new Headers(res.headers);
                headers.set("Cross-Origin-Embedder-Policy", coepCredentialless ? "credentialless" : "require-corp");
                if (!coepCredentialless) {
                    headers.set("Cross-Origin-Resource-Policy", "cross-origin");
                }
                headers.set("Cross-Origin-Opener-Policy", "same-origin");

                // Return the modified response
                return new Response(res.body, { status: res.status, statusText: res.statusText, headers: headers });
            }).catch((err) => {
                // Log the error and return a fallback error response
                console.error('Fetch failed:', err);
                return new Response('Service Worker error', { status: 503 });
            })
        );
    });
} else {
    // Code for the client-side (browser)
    const e = window.sessionStorage.getItem("coiReloadedBySelf");
    window.sessionStorage.removeItem("coiReloadedBySelf");
    const o = "coepdegrade" === e;
    const s = {
        shouldRegister: () => !e,
        shouldDeregister: () => false,
        coepCredentialless: () => true,
        coepDegrade: () => true,
        doReload: () => window.location.reload(),
        quiet: false,
        ...window.coi
    };
    const r = navigator;
    const t = r.serviceWorker && r.serviceWorker.controller;
    if (t && !window.crossOriginIsolated) {
        window.sessionStorage.setItem("coiCoepHasFailed", "true");
    }
    const i = window.sessionStorage.getItem("coiCoepHasFailed");

    if (t) {
        const e = s.coepDegrade() && !(o || window.crossOriginIsolated);
        r.serviceWorker.controller.postMessage({
            type: "coepCredentialless",
            value: !(e || i && s.coepDegrade()) && s.coepCredentialless()
        });

        if (e && !s.quiet) {
            console.log("Reloading page to degrade COEP.");
            window.sessionStorage.setItem("coiReloadedBySelf", "coepdegrade");
            s.doReload("coepdegrade");
        }

        if (s.shouldDeregister()) {
            r.serviceWorker.controller.postMessage({ type: "deregister" });
        }
    }

    if (!1 === window.crossOriginIsolated && s.shouldRegister()) {
        if (window.isSecureContext) {
            if (r.serviceWorker) {
                r.serviceWorker.register(window.document.currentScript.src).then((e) => {
                    if (!s.quiet) {
                        console.log("COOP/COEP Service Worker registered", e.scope);
                    }
                    e.addEventListener("updatefound", () => {
                        if (!s.quiet) {
                            console.log("Reloading page to make use of updated COOP/COEP Service Worker.");
                        }
                        window.sessionStorage.setItem("coiReloadedBySelf", "updatefound");
                        s.doReload();
                    });

                    if (e.active && !r.serviceWorker.controller) {
                        if (!s.quiet) {
                            console.log("Reloading page to make use of COOP/COEP Service Worker.");
                        }
                        window.sessionStorage.setItem("coiReloadedBySelf", "notcontrolling");
                        s.doReload();
                    }
                }, (e) => {
                    if (!s.quiet) {
                        console.error("COOP/COEP Service Worker failed to register:", e);
                    }
                });
            } else if (!s.quiet) {
                console.log("COOP/COEP Service Worker not registered, perhaps due to private mode.");
            }
        } else if (!s.quiet) {
            console.log("COOP/COEP Service Worker not registered, a secure context is required.");
        }
    }
}
