/*! Modified for LupineVault (github.com/lupinevault, lupinevault.com) by tf7software */
/*! coi-serviceworker v0.1.7 - Guido Zuidhof and contributors, licensed under MIT */
let coepCredentialless = !1;

if (typeof window === "undefined") {
    self.addEventListener("install", () => self.skipWaiting());
    self.addEventListener("activate", (e) => e.waitUntil(self.clients.claim()));

    self.addEventListener("message", (e) => {
        if (e.data) {
            if (e.data.type === "deregister") {
                self.registration.unregister()
                    .then(() => self.clients.matchAll())
                    .then((clients) => {
                        clients.forEach((client) => client.navigate(client.url));
                    });
            } else if (e.data.type === "coepCredentialless") {
                coepCredentialless = e.data.value;
            }
        }
    });

    self.addEventListener("fetch", (event) => {
        const request = event.request;

        if (request.url.startsWith("https://lupinevault.com/")) {
            // Allow requests to lupinevault.com without modifying headers
            return; // Pass through without intercepting
        }

        if (request.cache === "only-if-cached" && request.mode !== "same-origin") {
            return;
        }

        const modifiedRequest = coepCredentialless && request.mode === "no-cors"
            ? new Request(request, { credentials: "omit" })
            : request;

        event.respondWith(
            fetch(modifiedRequest)
                .then((response) => {
                    if (response.status === 0) return response;

                    const headers = new Headers(response.headers);

                    headers.set(
                        "Cross-Origin-Embedder-Policy",
                        coepCredentialless ? "credentialless" : "require-corp"
                    );

                    if (!coepCredentialless) {
                        headers.set("Cross-Origin-Resource-Policy", "cross-origin");
                    }

                    headers.set("Cross-Origin-Opener-Policy", "same-origin");

                    return new Response(response.body, {
                        status: response.status,
                        statusText: response.statusText,
                        headers: headers,
                    });
                })
                .catch((error) => console.error(error))
        );
    });
} else {
    (() => {
        const e = window.sessionStorage.getItem("coiReloadedBySelf");
        window.sessionStorage.removeItem("coiReloadedBySelf");
        const o = "coepdegrade" == e,
            s = {
                shouldRegister: () => !e,
                shouldDeregister: () => !1,
                coepCredentialless: () => !0,
                coepDegrade: () => !0,
                doReload: () => window.location.reload(),
                quiet: !1,
                ...window.coi,
            },
            r = navigator,
            t = r.serviceWorker && r.serviceWorker.controller;

        t && !window.crossOriginIsolated && window.sessionStorage.setItem("coiCoepHasFailed", "true");
        const i = window.sessionStorage.getItem("coiCoepHasFailed");

        if (t) {
            const e = s.coepDegrade() && !(o || window.crossOriginIsolated);
            r.serviceWorker.controller.postMessage({
                type: "coepCredentialless",
                value: !(e || i && s.coepDegrade()) && s.coepCredentialless(),
            });

            e &&
                (!s.quiet && console.log("Reloading page to degrade COEP."),
                window.sessionStorage.setItem("coiReloadedBySelf", "coepdegrade"),
                s.doReload("coepdegrade"));

            s.shouldDeregister() &&
                r.serviceWorker.controller.postMessage({ type: "deregister" });
        }

        !1 === window.crossOriginIsolated &&
            s.shouldRegister() &&
            (window.isSecureContext
                ? r.serviceWorker
                    ? r.serviceWorker
                          .register(window.document.currentScript.src)
                          .then(
                              (e) => {
                                  !s.quiet &&
                                      console.log(
                                          "COOP/COEP Service Worker registered",
                                          e.scope
                                      );
                                  e.addEventListener("updatefound", () => {
                                      !s.quiet &&
                                          console.log(
                                              "Reloading page to make use of updated COOP/COEP Service Worker."
                                          );
                                      window.sessionStorage.setItem(
                                          "coiReloadedBySelf",
                                          "updatefound"
                                      );
                                      s.doReload();
                                  });
                                  e.active &&
                                      !r.serviceWorker.controller &&
                                      (!s.quiet &&
                                          console.log(
                                              "Reloading page to make use of COOP/COEP Service Worker."
                                          ),
                                      window.sessionStorage.setItem(
                                          "coiReloadedBySelf",
                                          "notcontrolling"
                                      ),
                                      s.doReload());
                              },
                              (e) => {
                                  !s.quiet &&
                                      console.error(
                                          "COOP/COEP Service Worker failed to register:",
                                          e
                                      );
                              }
                          )
                    : !s.quiet &&
                      console.error(
                          "COOP/COEP Service Worker not registered, perhaps due to private mode."
                      )
                : !s.quiet &&
                  console.log(
                      "COOP/COEP Service Worker not registered, a secure context is required."
                  ));
    })();
}
